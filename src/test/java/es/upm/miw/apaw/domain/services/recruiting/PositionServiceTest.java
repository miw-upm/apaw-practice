package es.upm.miw.apaw.domain.services.recruiting;

import es.upm.miw.apaw.domain.models.recruiting.Position;
import es.upm.miw.apaw.domain.models.recruiting.PositionNumVacanciesUpdating;
import es.upm.miw.apaw.domain.restclients.UserRestClient;
import es.upm.miw.apaw.domain.exceptions.NotFoundException;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.bean.override.mockito.MockitoBean;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("test")
class PositionServiceTest {

    @Autowired
    private PositionService positionService;

    @MockitoBean
    private UserRestClient userRestClient;

    // TESTS CREATE   ///////////////////////////////////////////////////////////////////

    @Test
    void testCreatePosition_WithExplicitReference() {
        // Arrange
        Position newPosition = Position.builder()
                .reference(2001)
                .name("Backend Developer")
                .description("Develop and maintain backend microservices")
                .annualSalary(new BigDecimal("40000"))
                .bonusSalary(new BigDecimal("5000"))
                .numVacancies(2)
                .build();

        // Act
        Position created = positionService.create(newPosition);

        // Assert
        assertNotNull(created);
        assertEquals(2001, created.getReference());
        assertEquals("Backend Developer", created.getName());
        assertEquals(2, created.getNumVacancies());
    }

    @Test
    void testCreatePosition_WithoutReference() {
        // Arrange
        Position newPosition = Position.builder()
                .name("SAP HCM Consultant")
                .description("Develop solutions in SAP HCM")
                .annualSalary(new BigDecimal("55000"))
                .bonusSalary(new BigDecimal("9000"))
                .numVacancies(3)
                .build();

        // Act
        Position created = positionService.create(newPosition);

        // Assert
        assertNotNull(created);
        assertTrue(created.getReference() > 0, "Reference should be autogenerated");
        assertEquals("SAP HCM Consultant", created.getName());
        assertEquals(3, created.getNumVacancies());
    }

    // TESTS PATCH   ////////////////////////////////////////////////////////////////////

    @Test
    void testUpdateNumVacancies_SinglePosition() {
        // Arrange
        PositionNumVacanciesUpdating updateDTO = PositionNumVacanciesUpdating.builder()
                .reference(1001)
                .numVacancies(6)
                .build();

        // Act
        positionService.updateNumVacancies(Stream.of(updateDTO));

        // Assert: leer la posici√≥n actualizada
        Position updated = positionService.read(1001);
        assertEquals(6, updated.getNumVacancies());
        assertEquals("ABAP developer", updated.getName());
    }

    @Test
    void testUpdateNumVacancies_MultiplePositions() {
        // Arrange
        List<PositionNumVacanciesUpdating> updatesList = List.of(
                PositionNumVacanciesUpdating.builder().reference(1001).numVacancies(5).build(),
                PositionNumVacanciesUpdating.builder().reference(1002).numVacancies(2).build()
        );

        // Act
        positionService.updateNumVacancies(updatesList.stream());

        // Assert: leer posiciones actualizadas
        Position updatedAbap = positionService.read(1001);
        Position updatedCpi = positionService.read(1002);

        assertEquals(5, updatedAbap.getNumVacancies());
        assertEquals(2, updatedCpi.getNumVacancies());
        assertEquals("ABAP developer", updatedAbap.getName());
        assertEquals("CPI consultant", updatedCpi.getName());
    }

    @Test
    void testUpdateNumVacancies_PositionNotFound() {
        // Arrange
        PositionNumVacanciesUpdating updateDTO = PositionNumVacanciesUpdating.builder()
                .reference(9999)
                .numVacancies(5)
                .build();

        Stream<PositionNumVacanciesUpdating> updatesStream = Stream.of(updateDTO);

        // Act & Assert
        NotFoundException exception = assertThrows(NotFoundException.class, () ->
                positionService.updateNumVacancies(updatesStream)
        );

        assertEquals(
                "Not Found Exception (404). Position with reference 9999 not found",
                exception.getMessage()
        );
    }
}